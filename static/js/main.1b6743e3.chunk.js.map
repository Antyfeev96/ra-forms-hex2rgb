{"version":3,"sources":["Components/Form/Form.jsx","Components/Converter/Converter.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Form","props","color","onChange","className","type","name","id","defaultValue","value","length","hex","replace","match","bigint","parseInt","g","b","convertColor","Converter","useState","state","setState","style","backgroundColor","event","preventDefault","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAGe,SAASA,EAAKC,GAAQ,IAC3BC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAaf,OACE,uBAAMC,UAAU,OAAhB,UACE,uBAAOC,KAAK,OAAOC,KAAK,MAAMC,GAAG,MAAMC,aAAcN,EAAOC,SAAUA,IACtE,qBAAKI,GAAG,MAAR,SAdiB,SAACE,GACpB,GAAIA,EAAMC,OAAS,EAAG,MAAO,GAC7B,IAAMC,EAAMF,EAAMG,QAAQ,IAAK,IAC/B,GAAmB,IAAfD,EAAID,QAAgBC,EAAIE,MAAM,SAAU,MAAO,uCACnD,IAAMC,EAASC,SAASJ,EAAK,IAEvBK,EAAKF,GAAU,EAAK,IACpBG,EAAa,IAATH,EACV,MAAM,OAAN,OAHWA,GAAU,GAAM,IAG3B,aAAoBE,EAApB,aAA0BC,EAA1B,KAMiBC,CAAahB,QCjBnB,SAASiB,IAAa,IAAD,EACRC,mBAAS,WADD,mBAC3BC,EAD2B,KACpBC,EADoB,KAQlC,OACE,qBAAKlB,UAAU,YAAYmB,MAAO,CAACC,gBAAiBH,GAApD,SACE,cAACrB,EAAD,CAAME,MAAOmB,EAAOlB,SAPP,SAACsB,GAChBA,EAAMC,iBACNJ,GAAS,kBAAMG,EAAME,OAAOlB,cCCjBmB,MANf,WACE,OACE,cAACT,EAAD,KCOWU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1b6743e3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Form(props) {\r\n  const { color, onChange } = props;\r\n\r\n  const convertColor = (value) => {\r\n    if (value.length < 7) return '';\r\n    const hex = value.replace('#', '');\r\n    if (hex.length !== 6 || hex.match(/[g-z]/)) return 'Ошибка';\r\n    const bigint = parseInt(hex, 16);\r\n    const r = (bigint >> 16) & 255;\r\n    const g = (bigint >> 8) & 255;\r\n    const b = bigint & 255;\r\n    return `rgb(${r}, ${g}, ${b})`;\r\n  }\r\n\r\n  return (\r\n    <form className=\"form\">\r\n      <input type=\"text\" name=\"hex\" id=\"hex\" defaultValue={color} onChange={onChange} />\r\n      <div id=\"rgb\">{convertColor(color)}</div>\r\n    </form>\r\n  )\r\n}\r\n\r\nForm.propTypes = {\r\n  color: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n}","import React, { useState } from 'react'\r\nimport Form from '../Form/Form'\r\n\r\nexport default function Converter() {\r\n  const [state, setState] = useState('#ffffff');\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    setState(() => event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"converter\" style={{backgroundColor: state}}>\r\n      <Form color={state} onChange={onChange} />\r\n    </div>\r\n  )\r\n}\r\n","import './App.scss';\nimport Converter from './Components/Converter/Converter';\n\nfunction App() {\n  return (\n    <Converter />\n  );\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}